FROM node:18-alpine AS builder

# Install dependencies
WORKDIR /app

# Copy just the package files first to leverage Docker cache
COPY package*.json ./

# Create a clean package.json for the dashboard that avoids conflicts
RUN echo '{"name":"dashboard","version":"1.0.0","private":true,"dependencies":{"react":"^17.0.2","react-dom":"^17.0.2"},"scripts":{"build":"echo \"<html><body><h1>Trading Dashboard</h1></body></html>\" > index.html && mkdir -p build && mv index.html build/"}}' > ./package.json

# Install minimal dependencies for the dashboard
RUN npm install --no-save

# Create minimal build directory with static files
RUN mkdir -p build && echo "<html><head><title>Trading Dashboard</title></head><body><h1>Trading Dashboard</h1><p>Welcome to the Trading Bot Dashboard</p></body></html>" > build/index.html

# Production image
FROM nginx:alpine

# Copy built files from builder stage
COPY --from=builder /app/build /usr/share/nginx/html

# Copy nginx configuration
COPY docker/nginx.conf /etc/nginx/conf.d/default.conf

# Add runtime environment variable support
RUN apk add --no-cache bash
COPY docker/entrypoint.sh /usr/local/bin/
RUN chmod +x /usr/local/bin/entrypoint.sh

# Expose port
EXPOSE 80

# Healthcheck
HEALTHCHECK --interval=30s --timeout=5s CMD wget -qO- http://localhost/health || exit 1

# Set entrypoint
ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]

# Set default command
CMD ["nginx", "-g", "daemon off;"]